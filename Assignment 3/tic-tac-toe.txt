Ethan Wong
(I have used React a bit before so I have packages already installed)


Getting Started 
* Open the terminal in VS Code with ctrl-`
* Type npx create-react-app tic-tac-toe to create project
* Delete files in /src folder with right click > delete file
* Create new file index.css in /src folder, fill with CSS starter code
* Create new file index.js in /src folder, fill with JS starter code
* Open in local host by typing npm start in terminal
* localhost should open up in a browser


Beginning to Code
* Change Board’s renderSquare() so it can pass props to Square class
* return <Square value={i}
* Change Square’s render so it takes in the props
* {this.props.value}


Coding Interactive Components
* Want to have the box display an ‘X’ when clicked
* Create a constructor with a state
constructor(props) {
   super(props);
   this.state = {
     value: null,
   };
 }
* super(props) is usually necessary when creating a constructor
* Set the state to null as a default
* Add onClick function to render() so the square can display the ‘X’
className="square"
       onClick={() => this.setState({value: 'X'})}
{this.state.value}
* Changes a square to the value of the prop when clicked (prop is set to ‘X’)


Parent and Children Components
* Have parent component control children components for better structure
* Create Board constructor that initializes all squares to null
constructor(props) {
   super(props);
   this.state = {
     squares: Array(9).fill(null),
   };
 }
* Change Board’s renderSquare() so that it controls the squares’ displays
return (
                <Square
                     value={this.state.squares[i]}
             onClick={() => this.handleClick(i)}        
               />
             );
* Now the parent (board) controls the appearance of the squares
* Delete constructor from square because now Board does its job
* Now have to adjust Square since it ceded some functionality
* Replace this.state.value with this.props.value in Square’s render()
* Replace this.setState() with this.props.onClick() in Square’s render()
* Add handleClick function to Board that actually creates ‘X’ in the squares
handleClick(i) {
   const squares = this.state.squares.slice();
   squares[i] = 'X';
   this.setState({squares: squares});
 }


Function Components (simpler versions of classes)
* Change Square class to function component
* It doesn’t need much functionality now that Board controls it
* Function components are good when component only has render()
* Square class becomes:
* function Square(props) {
  return (
    <button className="square" onClick={props.onClick}>
      {props.value}
    </button>
  );
}


Taking Turns
* Want to change game so that players take turns
* Haven’t implemented a way to create ‘O’ yet
* Add boolean to Board constructor to keep track of turns
xIsNext: true,
* Must change the letter that is placed on board in handleClick function
squares[i] = this.state.xIsNext ? 'X' : 'O';
* Need to change the boolean after every turn
xIsNext: !this.state.xIsNext,






Declaring the winner
* Create helper function that determines winner 
function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
* Make Board’s render() use this function to check if a player wins
const winner = calculateWinner(this.state.squares);
   let status;
   if (winner) {
     status = 'Winner: ' + winner;
   } else {
     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
   }
* Want the game to stop accepting input after someone wins
* Add this to handleClick
if (calculateWinner(squares) || squares[i]) {
     return;
   }






Lifting up state
* Using slice treats squares as immutable, we can look back at them
* Store past squares array in array called “history”
* Want highest level component to control history - Game component
* Add constructor for Game
constructor(props) {
   super(props);
   this.state = {
     history: [{
       squares: Array(9).fill(null),
     }],
     xIsNext: true,
   };
 }
* Board now cedes a lot of functionality to Game
* Modify Board accordingly by deleting constructor
* Also change renderSquare() so it is
value={this.props.squares[i]}
       onClick={() => this.props.onClick(i)}
* Want to give Game’s render() more responsibility; have it control history
render() {
   const history = this.state.history;
   const current = history[history.length - 1];
   const winner = calculateWinner(current.squares);
   let status;
   if (winner) {
     status = 'Winner: ' + winner;
   } else {
     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
   }


    return (
      <div className="game">
        <div className="game-board">


         <Board
           squares={current.squares}
           onClick={(i) => this.handleClick(i)}
         />
       </div>
        <div className="game-info">


         <div>{status}</div>
         <ol>{/* TODO */}</ol>
        </div>
      </div>
    );
 }
* Remove corresponding code from Board’s render() - no longer needed
* Move handleClick to Game, have it add on to history
handleClick(i) {


   const history = this.state.history;
   const current = history[history.length - 1];
   const squares = current.squares.slice();
   if (calculateWinner(squares) || squares[i]) {
      return;
    }
    squares[i] = this.state.xIsNext ? 'X' : 'O';
    this.setState({


     history: history.concat([{
       squares: squares,
     }]),
     xIsNext: !this.state.xIsNext,
    });
  }


Displaying the history
* Want to connect past moves with React buttons on screen
* Use map method to map past moves with list of buttons in Game’s render()
const moves = history.map((step, move) => {
     const desc = move ?
       'Go to move #' + move :
       'Go to game start';
     return (
       <li>
         <button onClick={() => this.jumpTo(move)}>{desc}</button>
       </li>
     );
   });


“Time travel”
* Implemented by going in history array, restoring an old board
* Add keys to act as labels for sequential number of each move 
* Modify Game’s render to add the keys
return (


       <li key={move}>
         <button onClick={() => this.jumpTo(move)}>{desc}</button>
        </li>
      );
* Add stepNumber:0 to Game’s constructor
* Add jumpTo method in Game
jumpTo(step) {
   this.setState({
     stepNumber: step,
     xIsNext: (step % 2) === 0,
   });
 }
* stepNumber reflects the move currently displayed to user
* Make sure to delete “future history” if going “back in time”
* Need to modify handleClick
const history = this.state.history.slice(0, this.state.stepNumber + 1);
stepNumber: history.length,
* Change Game’s render so it shows the board corresponding with stepNumber
const current = history[this.state.stepNumber];